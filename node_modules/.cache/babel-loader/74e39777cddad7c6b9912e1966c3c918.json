{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/sahiljagtap/Desktop/Projects/Portfolio Website/sahil_web/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/Users/sahiljagtap/Desktop/Projects/Portfolio Website/sahil_web/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/sahiljagtap/Desktop/Projects/Portfolio Website/sahil_web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/Users/sahiljagtap/Desktop/Projects/Portfolio Website/sahil_web/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createClass from \"/Users/sahiljagtap/Desktop/Projects/Portfolio Website/sahil_web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/sahiljagtap/Desktop/Projects/Portfolio Website/sahil_web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/Users/sahiljagtap/Desktop/Projects/Portfolio Website/sahil_web/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/sahiljagtap/Desktop/Projects/Portfolio Website/sahil_web/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"/Users/sahiljagtap/Desktop/Projects/Portfolio Website/sahil_web/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _slicedToArray from \"/Users/sahiljagtap/Desktop/Projects/Portfolio Website/sahil_web/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/Users/sahiljagtap/Desktop/Projects/Portfolio Website/sahil_web/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\n/**\n * @remix-run/router v1.0.3\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nvar PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$initialEntri = _options.initialEntries,\n      initialEntries = _options$initialEntri === void 0 ? [\"/\"] : _options$initialEntri,\n      initialIndex = _options.initialIndex,\n      _options$v5Compat = _options.v5Compat,\n      v5Compat = _options$v5Compat === void 0 ? false : _options$v5Compat;\n  var entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map(function (entry, index) {\n    return createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined);\n  });\n  var index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  var action = Action.Pop;\n  var listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    var location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  var history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref: function createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    encodeLocation: function encodeLocation(location) {\n      return location;\n    },\n    push: function push(to, state) {\n      action = Action.Push;\n      var nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation\n        });\n      }\n    },\n    replace: function replace(to, state) {\n      action = Action.Replace;\n      var nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation\n        });\n      }\n    },\n    go: function go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n\n      if (listener) {\n        listener({\n          action: action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n    listen: function listen(fn) {\n      listener = fn;\n      return function () {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    var _window$location = window.location,\n        pathname = _window$location.pathname,\n        search = _window$location.search,\n        hash = _window$location.hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    var _parsePath = parsePath(window.location.hash.substr(1)),\n        _parsePath$pathname = _parsePath.pathname,\n        pathname = _parsePath$pathname === void 0 ? \"/\" : _parsePath$pathname,\n        _parsePath$search = _parsePath.search,\n        search = _parsePath$search === void 0 ? \"\" : _parsePath$search,\n        _parsePath$hash = _parsePath.hash,\n        hash = _parsePath$hash === void 0 ? \"\" : _parsePath$hash;\n\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    var base = window.document.querySelector(\"base\");\n    var href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      var url = window.location.href;\n      var hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  var location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state: state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  var _ref$pathname = _ref.pathname,\n      pathname = _ref$pathname === void 0 ? \"/\" : _ref$pathname,\n      _ref$search = _ref.search,\n      search = _ref$search === void 0 ? \"\" : _ref$search,\n      _ref$hash = _ref.hash,\n      hash = _ref$hash === void 0 ? \"\" : _ref$hash;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  var parsedPath = {};\n\n  if (path) {\n    var hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    var searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction createURL(location) {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  var base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" && window.location.origin !== \"null\" ? window.location.origin : \"unknown://unknown\";\n  var href = typeof location === \"string\" ? location : createPath(location);\n  return new URL(href, base);\n}\n\nfunction getUrlBasedHistory(getLocation, _createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options2 = options,\n      _options2$window = _options2.window,\n      window = _options2$window === void 0 ? document.defaultView : _options2$window,\n      _options2$v5Compat = _options2.v5Compat,\n      v5Compat = _options2$v5Compat === void 0 ? false : _options2$v5Compat;\n  var globalHistory = window.history;\n  var action = Action.Pop;\n  var listener = null;\n\n  function handlePop() {\n    action = Action.Pop;\n\n    if (listener) {\n      listener({\n        action: action,\n        location: history.location\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    var historyState = getHistoryState(location);\n    var url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    var historyState = getHistoryState(location);\n    var url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location\n      });\n    }\n  }\n\n  var history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen: function listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return function () {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref: function createHref(to) {\n      return _createHref(window, to);\n    },\n    encodeLocation: function encodeLocation(location) {\n      // Encode a Location the same way window.location would\n      var url = createURL(createPath(location));\n      return _extends({}, location, {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      });\n    },\n    push: push,\n    replace: replace,\n    go: function go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n\n  return routes.map(function (route, index) {\n    var treePath = [].concat(_toConsumableArray(parentPath), [index]);\n    var id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      var indexRoute = _extends({}, route, {\n        id: id\n      });\n\n      return indexRoute;\n    } else {\n      var pathOrLayoutRoute = _extends({}, route, {\n        id: id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  var location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  var pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  var branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  var matches = null;\n\n  for (var i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  routes.forEach(function (route, index) {\n    var meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route: route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  });\n  return branches;\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score // Higher score first\n    : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\n\nvar paramRe = /^:\\w+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\n\nvar isSplat = function isSplat(s) {\n  return s === \"*\";\n};\n\nfunction computeScore(path, index) {\n  var segments = path.split(\"/\");\n  var initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue);\n  }, initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  var routesMeta = branch.routesMeta;\n  var matchedParams = {};\n  var matchedPathname = \"/\";\n  var matches = [];\n\n  for (var i = 0; i < routesMeta.length; ++i) {\n    var meta = routesMeta[i];\n    var end = i === routesMeta.length - 1;\n    var remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    var match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end: end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    var route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route: route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\n\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path.replace(/:(\\w+)/g, function (_, key) {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/(\\/?)\\*/, function (_, prefix, __, str) {\n    var star = \"*\";\n\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),\n      _compilePath2 = _slicedToArray(_compilePath, 2),\n      matcher = _compilePath2[0],\n      paramNames = _compilePath2[1];\n\n  var match = pathname.match(matcher);\n  if (!match) return null;\n  var matchedPathname = match[0];\n  var pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  var captureGroups = match.slice(1);\n  var params = paramNames.reduce(function (memo, paramName, index) {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      var splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params: params,\n    pathname: matchedPathname,\n    pathnameBase: pathnameBase,\n    pattern: pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  var paramNames = [];\n  var regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, function (_, paramName) {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  var startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  var nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n/**\n * @private\n */\n\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  var _ref11 = typeof to === \"string\" ? parsePath(to) : to,\n      toPathname = _ref11.pathname,\n      _ref11$search = _ref11.search,\n      search = _ref11$search === void 0 ? \"\" : _ref11$search,\n      _ref11$hash = _ref11.hash,\n      hash = _ref11$hash === void 0 ? \"\" : _ref11$hash;\n\n  var pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname: pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  var segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  var relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(function (segment) {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter(function (match, index) {\n    return index === 0 || match.route.path && match.route.path.length > 0;\n  });\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  var to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  var isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  var toPathname = isEmptyPath ? \"/\" : to.pathname;\n  var from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    var routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      var toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  var path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  var hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  var hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nvar joinPaths = function joinPaths(paths) {\n  return paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n};\n/**\n * @private\n */\n\n\nvar normalizePathname = function normalizePathname(pathname) {\n  return pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n};\n/**\n * @private\n */\n\n\nvar normalizeSearch = function normalizeSearch(search) {\n  return !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n};\n/**\n * @private\n */\n\n\nvar normalizeHash = function normalizeHash(hash) {\n  return !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n};\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nvar json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  var headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n\nvar AbortedDeferredError = /*#__PURE__*/function (_Error) {\n  _inherits(AbortedDeferredError, _Error);\n\n  var _super = _createSuper(AbortedDeferredError);\n\n  function AbortedDeferredError() {\n    _classCallCheck(this, AbortedDeferredError);\n\n    return _super.apply(this, arguments);\n  }\n\n  return _createClass(AbortedDeferredError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar DeferredData = /*#__PURE__*/function () {\n  function DeferredData(data) {\n    var _this = this;\n\n    _classCallCheck(this, DeferredData);\n\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    var reject;\n    this.abortPromise = new Promise(function (_, r) {\n      return reject = r;\n    });\n    this.controller = new AbortController();\n\n    var onAbort = function onAbort() {\n      return reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    };\n\n    this.unlistenAbortSignal = function () {\n      return _this.controller.signal.removeEventListener(\"abort\", onAbort);\n    };\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce(function (acc, _ref) {\n      var _ref12 = _slicedToArray(_ref, 2),\n          key = _ref12[0],\n          value = _ref12[1];\n\n      return Object.assign(acc, _defineProperty({}, key, _this.trackPromise(key, value)));\n    }, {});\n  }\n\n  _createClass(DeferredData, [{\n    key: \"trackPromise\",\n    value: function trackPromise(key, value) {\n      var _this2 = this;\n\n      if (!(value instanceof Promise)) {\n        return value;\n      }\n\n      this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n      // _data/_error props upon resolve/reject\n\n      var promise = Promise.race([value, this.abortPromise]).then(function (data) {\n        return _this2.onSettle(promise, key, null, data);\n      }, function (error) {\n        return _this2.onSettle(promise, key, error);\n      }); // Register rejection listeners to avoid uncaught promise rejections on\n      // errors or aborted deferred values\n\n      promise.catch(function () {});\n      Object.defineProperty(promise, \"_tracked\", {\n        get: function get() {\n          return true;\n        }\n      });\n      return promise;\n    }\n  }, {\n    key: \"onSettle\",\n    value: function onSettle(promise, key, error, data) {\n      if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n        this.unlistenAbortSignal();\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        return Promise.reject(error);\n      }\n\n      this.pendingKeys.delete(key);\n\n      if (this.done) {\n        // Nothing left to abort!\n        this.unlistenAbortSignal();\n      }\n\n      var subscriber = this.subscriber;\n\n      if (error) {\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        subscriber && subscriber(false);\n        return Promise.reject(error);\n      }\n\n      Object.defineProperty(promise, \"_data\", {\n        get: function get() {\n          return data;\n        }\n      });\n      subscriber && subscriber(false);\n      return data;\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      this.subscriber = fn;\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _this3 = this;\n\n      this.controller.abort();\n      this.pendingKeys.forEach(function (v, k) {\n        return _this3.pendingKeys.delete(k);\n      });\n      var subscriber = this.subscriber;\n      subscriber && subscriber(true);\n    }\n  }, {\n    key: \"resolveData\",\n    value: function () {\n      var _resolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(signal) {\n        var _this4 = this;\n\n        var aborted, onAbort;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                aborted = false;\n\n                if (this.done) {\n                  _context.next = 7;\n                  break;\n                }\n\n                onAbort = function onAbort() {\n                  return _this4.cancel();\n                };\n\n                signal.addEventListener(\"abort\", onAbort);\n                _context.next = 6;\n                return new Promise(function (resolve) {\n                  _this4.subscribe(function (aborted) {\n                    signal.removeEventListener(\"abort\", onAbort);\n\n                    if (aborted || _this4.done) {\n                      resolve(aborted);\n                    }\n                  });\n                });\n\n              case 6:\n                aborted = _context.sent;\n\n              case 7:\n                return _context.abrupt(\"return\", aborted);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function resolveData(_x) {\n        return _resolveData.apply(this, arguments);\n      }\n\n      return resolveData;\n    }()\n  }, {\n    key: \"done\",\n    get: function get() {\n      return this.pendingKeys.size === 0;\n    }\n  }, {\n    key: \"unwrappedData\",\n    get: function get() {\n      invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n      return Object.entries(this.data).reduce(function (acc, _ref2) {\n        var _ref13 = _slicedToArray(_ref2, 2),\n            key = _ref13[0],\n            value = _ref13[1];\n\n        return Object.assign(acc, _defineProperty({}, key, unwrapTrackedPromise(value)));\n      }, {});\n    }\n  }]);\n\n  return DeferredData;\n}();\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nfunction defer(data) {\n  return new DeferredData(data);\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nvar redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  var responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  var headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\n\nvar ErrorResponse = /*#__PURE__*/_createClass(function ErrorResponse(status, statusText, data) {\n  _classCallCheck(this, ErrorResponse);\n\n  this.status = status;\n  this.statusText = statusText || \"\";\n  this.data = data;\n});\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\n\nvar IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nvar isServer = !isBrowser; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  var dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  var unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  var subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  var savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  var getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  var getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n\n  var initialScrollRestored = false;\n  var initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  var initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    var _getNotFoundMatches = getNotFoundMatches(dataRoutes),\n        matches = _getNotFoundMatches.matches,\n        route = _getNotFoundMatches.route,\n        error = _getNotFoundMatches.error;\n\n    initialMatches = matches;\n    initialErrors = _defineProperty({}, route.id, error);\n  }\n\n  var initialized = !initialMatches.some(function (m) {\n    return m.route.loader;\n  }) || init.hydrationData != null;\n  var router;\n  var state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized: initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  var pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  var pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  var pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  var isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  var isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  var cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  var cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  var fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  var incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  var pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  var fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  var fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  var fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  var activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(function (_ref) {\n      var historyAction = _ref.action,\n          location = _ref.location;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach(function (_, key) {\n      return deleteFetcher(key);\n    });\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return function () {\n      return subscribers.delete(fn);\n    };\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(function (subscriber) {\n      return subscriber(state);\n    });\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _state$navigation$for; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n\n\n    var isActionReload = state.actionData != null && state.navigation.formMethod != null && state.navigation.state === \"loading\" && ((_state$navigation$for = state.navigation.formAction) == null ? void 0 : _state$navigation$for.split(\"?\")[0]) === location.pathname; // Always preserve any existing loaderData from re-used routes\n\n    var newLoaderData = newState.loaderData ? {\n      loaderData: mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [])\n    } : {};\n    updateState(_extends({}, isActionReload ? {} : {\n      actionData: null\n    }, newState, newLoaderData, {\n      historyAction: pendingAction,\n      location: location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  function navigate(_x2, _x3) {\n    return _navigate.apply(this, arguments);\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function _navigate() {\n    _navigate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(to, opts) {\n      var _normalizeNavigateOpt2, path, submission, error, location, historyAction, preventScrollReset;\n\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(typeof to === \"number\")) {\n                _context2.next = 3;\n                break;\n              }\n\n              init.history.go(to);\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              _normalizeNavigateOpt2 = normalizeNavigateOptions(to, opts), path = _normalizeNavigateOpt2.path, submission = _normalizeNavigateOpt2.submission, error = _normalizeNavigateOpt2.error;\n              location = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n              // URL from window.location, so we need to encode it here so the behavior\n              // remains the same as POP and non-data-router usages.  new URL() does all\n              // the same encoding we'd get from a history.pushState/window.location read\n              // without having to touch history\n\n              location = init.history.encodeLocation(location);\n              historyAction = (opts && opts.replace) === true || submission != null ? Action.Replace : Action.Push;\n              preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n              _context2.next = 10;\n              return startNavigation(historyAction, location, {\n                submission: submission,\n                // Send through the formData serialization error if we have one so we can\n                // render at the right error boundary after we match routes\n                pendingError: error,\n                preventScrollReset: preventScrollReset,\n                replace: opts && opts.replace\n              });\n\n            case 10:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _navigate.apply(this, arguments);\n  }\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  function startNavigation(_x4, _x5, _x6) {\n    return _startNavigation.apply(this, arguments);\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  function _startNavigation() {\n    _startNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(historyAction, location, opts) {\n      var loadingNavigation, matches, _getNotFoundMatches2, notFoundMatches, _route, _error, request, pendingActionData, pendingError, actionOutput, navigation, _yield$handleLoaders, shortCircuited, loaderData, errors;\n\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // Abort any in-progress navigations and start a new one. Unset any ongoing\n              // uninterrupted revalidations unless told otherwise, since we want this\n              // new navigation to update history normally\n              pendingNavigationController && pendingNavigationController.abort();\n              pendingNavigationController = null;\n              pendingAction = historyAction;\n              isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n              // and track whether we should reset scroll on completion\n\n              saveScrollPosition(state.location, state.matches);\n              pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n              loadingNavigation = opts && opts.overrideNavigation;\n              matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n              if (matches) {\n                _context3.next = 13;\n                break;\n              }\n\n              _getNotFoundMatches2 = getNotFoundMatches(dataRoutes), notFoundMatches = _getNotFoundMatches2.matches, _route = _getNotFoundMatches2.route, _error = _getNotFoundMatches2.error; // Cancel all pending deferred on 404s since we don't keep any routes\n\n              cancelActiveDeferreds();\n              completeNavigation(location, {\n                matches: notFoundMatches,\n                loaderData: {},\n                errors: _defineProperty({}, _route.id, _error)\n              });\n              return _context3.abrupt(\"return\");\n\n            case 13:\n              if (!isHashChangeOnly(state.location, location)) {\n                _context3.next = 16;\n                break;\n              }\n\n              completeNavigation(location, {\n                matches: matches\n              });\n              return _context3.abrupt(\"return\");\n\n            case 16:\n              // Create a controller/Request for this navigation\n              pendingNavigationController = new AbortController();\n              request = createRequest(location, pendingNavigationController.signal, opts && opts.submission);\n\n              if (!(opts && opts.pendingError)) {\n                _context3.next = 22;\n                break;\n              }\n\n              // If we have a pendingError, it means the user attempted a GET submission\n              // with binary FormData so assign here and skip to handleLoaders.  That\n              // way we handle calling loaders above the boundary etc.  It's not really\n              // different from an actionError in that sense.\n              pendingError = _defineProperty({}, findNearestBoundary(matches).route.id, opts.pendingError);\n              _context3.next = 32;\n              break;\n\n            case 22:\n              if (!(opts && opts.submission)) {\n                _context3.next = 32;\n                break;\n              }\n\n              _context3.next = 25;\n              return handleAction(request, location, opts.submission, matches, {\n                replace: opts.replace\n              });\n\n            case 25:\n              actionOutput = _context3.sent;\n\n              if (!actionOutput.shortCircuited) {\n                _context3.next = 28;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 28:\n              pendingActionData = actionOutput.pendingActionData;\n              pendingError = actionOutput.pendingActionError;\n              navigation = _extends({\n                state: \"loading\",\n                location: location\n              }, opts.submission);\n              loadingNavigation = navigation;\n\n            case 32:\n              _context3.next = 34;\n              return handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n\n            case 34:\n              _yield$handleLoaders = _context3.sent;\n              shortCircuited = _yield$handleLoaders.shortCircuited;\n              loaderData = _yield$handleLoaders.loaderData;\n              errors = _yield$handleLoaders.errors;\n\n              if (!shortCircuited) {\n                _context3.next = 40;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 40:\n              // Clean up now that the action/loaders have completed.  Don't clean up if\n              // we short circuited because pendingNavigationController will have already\n              // been assigned to a new controller for the next navigation\n              pendingNavigationController = null;\n              completeNavigation(location, {\n                matches: matches,\n                loaderData: loaderData,\n                errors: errors\n              });\n\n            case 42:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _startNavigation.apply(this, arguments);\n  }\n\n  function handleAction(_x7, _x8, _x9, _x10, _x11) {\n    return _handleAction.apply(this, arguments);\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  function _handleAction() {\n    _handleAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(request, location, submission, matches, opts) {\n      var navigation, result, actionMatch, redirectNavigation, boundaryMatch;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              interruptActiveLoads(); // Put us in a submitting state\n\n              navigation = _extends({\n                state: \"submitting\",\n                location: location\n              }, submission);\n              updateState({\n                navigation: navigation\n              }); // Call our action and get the result\n\n              actionMatch = getTargetMatch(matches, location);\n\n              if (actionMatch.route.action) {\n                _context4.next = 8;\n                break;\n              }\n\n              result = getMethodNotAllowedResult(location);\n              _context4.next = 13;\n              break;\n\n            case 8:\n              _context4.next = 10;\n              return callLoaderOrAction(\"action\", request, actionMatch, matches, router.basename);\n\n            case 10:\n              result = _context4.sent;\n\n              if (!request.signal.aborted) {\n                _context4.next = 13;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 13:\n              if (!isRedirectResult(result)) {\n                _context4.next = 18;\n                break;\n              }\n\n              redirectNavigation = _extends({\n                state: \"loading\",\n                location: createLocation(state.location, result.location)\n              }, submission);\n              _context4.next = 17;\n              return startRedirectNavigation(result, redirectNavigation, opts && opts.replace);\n\n            case 17:\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 18:\n              if (!isErrorResult(result)) {\n                _context4.next = 22;\n                break;\n              }\n\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n              // action threw an error that'll be rendered in an errorElement, we fall\n              // back to PUSH so that the user can use the back button to get back to\n              // the pre-submission form location to try again\n\n              if ((opts && opts.replace) !== true) {\n                pendingAction = Action.Push;\n              }\n\n              return _context4.abrupt(\"return\", {\n                pendingActionError: _defineProperty({}, boundaryMatch.route.id, result.error)\n              });\n\n            case 22:\n              if (!isDeferredResult(result)) {\n                _context4.next = 24;\n                break;\n              }\n\n              throw new Error(\"defer() is not supported in actions\");\n\n            case 24:\n              return _context4.abrupt(\"return\", {\n                pendingActionData: _defineProperty({}, actionMatch.route.id, result.data)\n              });\n\n            case 25:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _handleAction.apply(this, arguments);\n  }\n\n  function handleLoaders(_x12, _x13, _x14, _x15, _x16, _x17, _x18, _x19) {\n    return _handleLoaders.apply(this, arguments);\n  }\n\n  function _handleLoaders() {\n    _handleLoaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n      var loadingNavigation, navigation, _getMatchesToLoad, _getMatchesToLoad2, matchesToLoad, revalidatingFetchers, _yield$callLoadersAnd, results, loaderResults, fetcherResults, redirect, redirectNavigation, _processLoaderData, loaderData, errors, didAbortFetchLoads;\n\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              // Figure out the right navigation we want to use for data loading\n              loadingNavigation = overrideNavigation;\n\n              if (!loadingNavigation) {\n                navigation = {\n                  state: \"loading\",\n                  location: location,\n                  formMethod: undefined,\n                  formAction: undefined,\n                  formEncType: undefined,\n                  formData: undefined\n                };\n                loadingNavigation = navigation;\n              }\n\n              _getMatchesToLoad = getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches), _getMatchesToLoad2 = _slicedToArray(_getMatchesToLoad, 2), matchesToLoad = _getMatchesToLoad2[0], revalidatingFetchers = _getMatchesToLoad2[1]; // Cancel pending deferreds for no-longer-matched routes or routes we're\n              // about to reload.  Note that if this is an action reload we would have\n              // already cancelled all pending deferreds so this would be a no-op\n\n              cancelActiveDeferreds(function (routeId) {\n                return !(matches && matches.some(function (m) {\n                  return m.route.id === routeId;\n                })) || matchesToLoad && matchesToLoad.some(function (m) {\n                  return m.route.id === routeId;\n                });\n              }); // Short circuit if we have no loaders to run\n\n              if (!(matchesToLoad.length === 0 && revalidatingFetchers.length === 0)) {\n                _context5.next = 7;\n                break;\n              }\n\n              completeNavigation(location, {\n                matches: matches,\n                loaderData: mergeLoaderData(state.loaderData, {}, matches),\n                // Commit pending error if we're short circuiting\n                errors: pendingError || null,\n                actionData: pendingActionData || null\n              });\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 7:\n              // If this is an uninterrupted revalidation, we remain in our current idle\n              // state.  If not, we need to switch to our loading state and load data,\n              // preserving any new action data or existing action data (in the case of\n              // a revalidation interrupting an actionReload)\n              if (!isUninterruptedRevalidation) {\n                revalidatingFetchers.forEach(function (_ref2) {\n                  var _ref14 = _slicedToArray(_ref2, 1),\n                      key = _ref14[0];\n\n                  var fetcher = state.fetchers.get(key);\n                  var revalidatingFetcher = {\n                    state: \"loading\",\n                    data: fetcher && fetcher.data,\n                    formMethod: undefined,\n                    formAction: undefined,\n                    formEncType: undefined,\n                    formData: undefined\n                  };\n                  state.fetchers.set(key, revalidatingFetcher);\n                });\n                updateState(_extends({\n                  navigation: loadingNavigation,\n                  actionData: pendingActionData || state.actionData || null\n                }, revalidatingFetchers.length > 0 ? {\n                  fetchers: new Map(state.fetchers)\n                } : {}));\n              }\n\n              pendingNavigationLoadId = ++incrementingLoadId;\n              revalidatingFetchers.forEach(function (_ref3) {\n                var _ref15 = _slicedToArray(_ref3, 1),\n                    key = _ref15[0];\n\n                return fetchControllers.set(key, pendingNavigationController);\n              });\n              _context5.next = 12;\n              return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n            case 12:\n              _yield$callLoadersAnd = _context5.sent;\n              results = _yield$callLoadersAnd.results;\n              loaderResults = _yield$callLoadersAnd.loaderResults;\n              fetcherResults = _yield$callLoadersAnd.fetcherResults;\n\n              if (!request.signal.aborted) {\n                _context5.next = 18;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 18:\n              // Clean up _after_ loaders have completed.  Don't clean up if we short\n              // circuited because fetchControllers would have been aborted and\n              // reassigned to new controllers for the next navigation\n              revalidatingFetchers.forEach(function (_ref4) {\n                var _ref16 = _slicedToArray(_ref4, 1),\n                    key = _ref16[0];\n\n                return fetchControllers.delete(key);\n              }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n              redirect = findRedirect(results);\n\n              if (!redirect) {\n                _context5.next = 25;\n                break;\n              }\n\n              redirectNavigation = getLoaderRedirect(state, redirect);\n              _context5.next = 24;\n              return startRedirectNavigation(redirect, redirectNavigation, replace);\n\n            case 24:\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 25:\n              // Process and commit output from loaders\n              _processLoaderData = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData.loaderData, errors = _processLoaderData.errors; // Wire up subscribers to update loaderData as promises settle\n\n              activeDeferreds.forEach(function (deferredData, routeId) {\n                deferredData.subscribe(function (aborted) {\n                  // Note: No need to updateState here since the TrackedPromise on\n                  // loaderData is stable across resolve/reject\n                  // Remove this instance if we were aborted or if promises have settled\n                  if (aborted || deferredData.done) {\n                    activeDeferreds.delete(routeId);\n                  }\n                });\n              });\n              markFetchRedirectsDone();\n              didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n              return _context5.abrupt(\"return\", _extends({\n                loaderData: loaderData,\n                errors: errors\n              }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n\n            case 30:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _handleLoaders.apply(this, arguments);\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    var matches = matchRoutes(dataRoutes, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n\n    var _normalizeNavigateOpt = normalizeNavigateOptions(href, opts, true),\n        path = _normalizeNavigateOpt.path,\n        submission = _normalizeNavigateOpt.submission;\n\n    var match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  function handleFetcherAction(_x20, _x21, _x22, _x23, _x24, _x25) {\n    return _handleFetcherAction.apply(this, arguments);\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  function _handleFetcherAction() {\n    _handleFetcherAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(key, routeId, path, match, requestMatches, submission) {\n      var _getMethodNotAllowedR, _error2, existingFetcher, fetcher, abortController, fetchRequest, actionResult, loadingFetcher, redirectNavigation, nextLocation, revalidationRequest, matches, loadId, loadFetcher, _getMatchesToLoad3, _getMatchesToLoad4, matchesToLoad, revalidatingFetchers, _yield$callLoadersAnd2, results, loaderResults, fetcherResults, redirect, _processLoaderData2, loaderData, errors, doneFetcher, didAbortFetchLoads;\n\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              interruptActiveLoads();\n              fetchLoadMatches.delete(key);\n\n              if (match.route.action) {\n                _context6.next = 6;\n                break;\n              }\n\n              _getMethodNotAllowedR = getMethodNotAllowedResult(path), _error2 = _getMethodNotAllowedR.error;\n              setFetcherError(key, routeId, _error2);\n              return _context6.abrupt(\"return\");\n\n            case 6:\n              // Put this fetcher into it's submitting state\n              existingFetcher = state.fetchers.get(key);\n              fetcher = _extends({\n                state: \"submitting\"\n              }, submission, {\n                data: existingFetcher && existingFetcher.data\n              });\n              state.fetchers.set(key, fetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              }); // Call the action for the fetcher\n\n              abortController = new AbortController();\n              fetchRequest = createRequest(path, abortController.signal, submission);\n              fetchControllers.set(key, abortController);\n              _context6.next = 15;\n              return callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, router.basename);\n\n            case 15:\n              actionResult = _context6.sent;\n\n              if (!fetchRequest.signal.aborted) {\n                _context6.next = 19;\n                break;\n              }\n\n              // We can delete this so long as we weren't aborted by ou our own fetcher\n              // re-submit which would have put _new_ controller is in fetchControllers\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 19:\n              if (!isRedirectResult(actionResult)) {\n                _context6.next = 29;\n                break;\n              }\n\n              fetchControllers.delete(key);\n              fetchRedirectIds.add(key);\n              loadingFetcher = _extends({\n                state: \"loading\"\n              }, submission, {\n                data: undefined\n              });\n              state.fetchers.set(key, loadingFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n              redirectNavigation = _extends({\n                state: \"loading\",\n                location: createLocation(state.location, actionResult.location)\n              }, submission);\n              _context6.next = 28;\n              return startRedirectNavigation(actionResult, redirectNavigation);\n\n            case 28:\n              return _context6.abrupt(\"return\");\n\n            case 29:\n              if (!isErrorResult(actionResult)) {\n                _context6.next = 32;\n                break;\n              }\n\n              setFetcherError(key, routeId, actionResult.error);\n              return _context6.abrupt(\"return\");\n\n            case 32:\n              if (isDeferredResult(actionResult)) {\n                invariant(false, \"defer() is not supported in actions\");\n              } // Start the data load for current matches, or the next location if we're\n              // in the middle of a navigation\n\n\n              nextLocation = state.navigation.location || state.location;\n              revalidationRequest = createRequest(nextLocation, abortController.signal);\n              matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n              invariant(matches, \"Didn't find any matches after fetcher action\");\n              loadId = ++incrementingLoadId;\n              fetchReloadIds.set(key, loadId);\n              loadFetcher = _extends({\n                state: \"loading\",\n                data: actionResult.data\n              }, submission);\n              state.fetchers.set(key, loadFetcher);\n              _getMatchesToLoad3 = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, _defineProperty({}, match.route.id, actionResult.data), undefined, // No need to send through errors since we short circuit above\n              fetchLoadMatches), _getMatchesToLoad4 = _slicedToArray(_getMatchesToLoad3, 2), matchesToLoad = _getMatchesToLoad4[0], revalidatingFetchers = _getMatchesToLoad4[1]; // Put all revalidating fetchers into the loading state, except for the\n              // current fetcher which we want to keep in it's current loading state which\n              // contains it's action submission info + action data\n\n              revalidatingFetchers.filter(function (_ref5) {\n                var _ref17 = _slicedToArray(_ref5, 1),\n                    staleKey = _ref17[0];\n\n                return staleKey !== key;\n              }).forEach(function (_ref6) {\n                var _ref18 = _slicedToArray(_ref6, 1),\n                    staleKey = _ref18[0];\n\n                var existingFetcher = state.fetchers.get(staleKey);\n                var revalidatingFetcher = {\n                  state: \"loading\",\n                  data: existingFetcher && existingFetcher.data,\n                  formMethod: undefined,\n                  formAction: undefined,\n                  formEncType: undefined,\n                  formData: undefined\n                };\n                state.fetchers.set(staleKey, revalidatingFetcher);\n                fetchControllers.set(staleKey, abortController);\n              });\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n              _context6.next = 46;\n              return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n            case 46:\n              _yield$callLoadersAnd2 = _context6.sent;\n              results = _yield$callLoadersAnd2.results;\n              loaderResults = _yield$callLoadersAnd2.loaderResults;\n              fetcherResults = _yield$callLoadersAnd2.fetcherResults;\n\n              if (!abortController.signal.aborted) {\n                _context6.next = 52;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 52:\n              fetchReloadIds.delete(key);\n              fetchControllers.delete(key);\n              revalidatingFetchers.forEach(function (_ref7) {\n                var _ref19 = _slicedToArray(_ref7, 1),\n                    staleKey = _ref19[0];\n\n                return fetchControllers.delete(staleKey);\n              });\n              redirect = findRedirect(results);\n\n              if (!redirect) {\n                _context6.next = 61;\n                break;\n              }\n\n              redirectNavigation = getLoaderRedirect(state, redirect);\n              _context6.next = 60;\n              return startRedirectNavigation(redirect, redirectNavigation);\n\n            case 60:\n              return _context6.abrupt(\"return\");\n\n            case 61:\n              // Process and commit output from loaders\n              _processLoaderData2 = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData2.loaderData, errors = _processLoaderData2.errors;\n              doneFetcher = {\n                state: \"idle\",\n                data: actionResult.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined\n              };\n              state.fetchers.set(key, doneFetcher);\n              didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n              // more recent than the navigation, we want the newer data so abort the\n              // navigation and complete it with the fetcher data\n\n              if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n                invariant(pendingAction, \"Expected pending action\");\n                pendingNavigationController && pendingNavigationController.abort();\n                completeNavigation(state.navigation.location, {\n                  matches: matches,\n                  loaderData: loaderData,\n                  errors: errors,\n                  fetchers: new Map(state.fetchers)\n                });\n              } else {\n                // otherwise just update with the fetcher data, preserving any existing\n                // loaderData for loaders that did not need to reload.  We have to\n                // manually merge here since we aren't going through completeNavigation\n                updateState(_extends({\n                  errors: errors,\n                  loaderData: mergeLoaderData(state.loaderData, loaderData, matches)\n                }, didAbortFetchLoads ? {\n                  fetchers: new Map(state.fetchers)\n                } : {}));\n                isRevalidationRequired = false;\n              }\n\n            case 66:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return _handleFetcherAction.apply(this, arguments);\n  }\n\n  function handleFetcherLoader(_x26, _x27, _x28, _x29, _x30) {\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  function _handleFetcherLoader() {\n    _handleFetcherLoader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(key, routeId, path, match, matches) {\n      var existingFetcher, loadingFetcher, abortController, fetchRequest, result, redirectNavigation, boundaryMatch, doneFetcher;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n              loadingFetcher = {\n                state: \"loading\",\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined,\n                data: existingFetcher && existingFetcher.data\n              };\n              state.fetchers.set(key, loadingFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              }); // Call the loader for this fetcher route match\n\n              abortController = new AbortController();\n              fetchRequest = createRequest(path, abortController.signal);\n              fetchControllers.set(key, abortController);\n              _context7.next = 9;\n              return callLoaderOrAction(\"loader\", fetchRequest, match, matches, router.basename);\n\n            case 9:\n              result = _context7.sent;\n\n              if (!isDeferredResult(result)) {\n                _context7.next = 17;\n                break;\n              }\n\n              _context7.next = 13;\n              return resolveDeferredData(result, fetchRequest.signal, true);\n\n            case 13:\n              _context7.t0 = _context7.sent;\n\n              if (_context7.t0) {\n                _context7.next = 16;\n                break;\n              }\n\n              _context7.t0 = result;\n\n            case 16:\n              result = _context7.t0;\n\n            case 17:\n              // We can delete this so long as we weren't aborted by ou our own fetcher\n              // re-load which would have put _new_ controller is in fetchControllers\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n\n              if (!fetchRequest.signal.aborted) {\n                _context7.next = 20;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 20:\n              if (!isRedirectResult(result)) {\n                _context7.next = 25;\n                break;\n              }\n\n              redirectNavigation = getLoaderRedirect(state, result);\n              _context7.next = 24;\n              return startRedirectNavigation(result, redirectNavigation);\n\n            case 24:\n              return _context7.abrupt(\"return\");\n\n            case 25:\n              if (!isErrorResult(result)) {\n                _context7.next = 30;\n                break;\n              }\n\n              boundaryMatch = findNearestBoundary(state.matches, routeId);\n              state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n              // do we need to behave any differently with our non-redirect errors?\n              // What if it was a non-redirect Response?\n\n              updateState({\n                fetchers: new Map(state.fetchers),\n                errors: _defineProperty({}, boundaryMatch.route.id, result.error)\n              });\n              return _context7.abrupt(\"return\");\n\n            case 30:\n              invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n              doneFetcher = {\n                state: \"idle\",\n                data: result.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined\n              };\n              state.fetchers.set(key, doneFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n\n            case 34:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n\n  function startRedirectNavigation(_x31, _x32, _x33) {\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n\n  function _startRedirectNavigation() {\n    _startRedirectNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(redirect, navigation, replace) {\n      var redirectHistoryAction;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              if (redirect.revalidate) {\n                isRevalidationRequired = true;\n              }\n\n              invariant(navigation.location, \"Expected a location on the redirect navigation\"); // There's no need to abort on redirects, since we don't detect the\n              // redirect until the action/loaders have settled\n\n              pendingNavigationController = null;\n              redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n              _context8.next = 6;\n              return startNavigation(redirectHistoryAction, navigation.location, {\n                overrideNavigation: navigation\n              });\n\n            case 6:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n\n  function callLoadersAndMaybeResolveData(_x34, _x35, _x36, _x37, _x38) {\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n\n  function _callLoadersAndMaybeResolveData() {\n    _callLoadersAndMaybeResolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n      var results, loaderResults, fetcherResults;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return Promise.all([].concat(_toConsumableArray(matchesToLoad.map(function (match) {\n                return callLoaderOrAction(\"loader\", request, match, matches, router.basename);\n              })), _toConsumableArray(fetchersToLoad.map(function (_ref8) {\n                var _ref20 = _slicedToArray(_ref8, 4),\n                    href = _ref20[1],\n                    match = _ref20[2],\n                    fetchMatches = _ref20[3];\n\n                return callLoaderOrAction(\"loader\", createRequest(href, request.signal), match, fetchMatches, router.basename);\n              }))));\n\n            case 2:\n              results = _context9.sent;\n              loaderResults = results.slice(0, matchesToLoad.length);\n              fetcherResults = results.slice(matchesToLoad.length);\n              _context9.next = 7;\n              return Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(function (_ref9) {\n                var _ref21 = _slicedToArray(_ref9, 3),\n                    match = _ref21[2];\n\n                return match;\n              }), fetcherResults, request.signal, true)]);\n\n            case 7:\n              return _context9.abrupt(\"return\", {\n                results: results,\n                loaderResults: loaderResults,\n                fetcherResults: fetcherResults\n              });\n\n            case 8:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n\n  function interruptActiveLoads() {\n    var _cancelledDeferredRou;\n\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    (_cancelledDeferredRou = cancelledDeferredRoutes).push.apply(_cancelledDeferredRou, _toConsumableArray(cancelActiveDeferreds())); // Abort in-flight fetcher loads\n\n\n    fetchLoadMatches.forEach(function (_, key) {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    var boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: _defineProperty({}, boundaryMatch.route.id, error),\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    var controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    var _iterator = _createForOfIteratorHelper(keys),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var key = _step.value;\n        var fetcher = getFetcher(key);\n        var doneFetcher = {\n          state: \"idle\",\n          data: fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        };\n        state.fetchers.set(key, doneFetcher);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    var doneKeys = [];\n\n    var _iterator2 = _createForOfIteratorHelper(fetchRedirectIds),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var key = _step2.value;\n        var fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          fetchRedirectIds.delete(key);\n          doneKeys.push(key);\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    var yeetedKeys = [];\n\n    var _iterator3 = _createForOfIteratorHelper(fetchReloadIds),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var _step3$value = _slicedToArray(_step3.value, 2),\n            key = _step3$value[0],\n            id = _step3$value[1];\n\n        if (id < landedId) {\n          var fetcher = state.fetchers.get(key);\n          invariant(fetcher, \"Expected fetcher: \" + key);\n\n          if (fetcher.state === \"loading\") {\n            abortFetcher(key);\n            fetchReloadIds.delete(key);\n            yeetedKeys.push(key);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    var cancelledRouteIds = [];\n    activeDeferreds.forEach(function (dfd, routeId) {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || function (location) {\n      return location.key;\n    }; // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      var y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return function () {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      var y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize: initialize,\n    subscribe: subscribe,\n    enableScrollRestoration: enableScrollRestoration,\n    navigate: navigate,\n    fetch: fetch,\n    revalidate: revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: function createHref(to) {\n      return init.history.createHref(to);\n    },\n    getFetcher: getFetcher,\n    deleteFetcher: deleteFetcher,\n    dispose: dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar validActionMethods = new Set([\"POST\", \"PUT\", \"PATCH\", \"DELETE\"]);\nvar validRequestMethods = new Set([\"GET\", \"HEAD\"].concat(_toConsumableArray(validActionMethods)));\n\nfunction unstable_createStaticHandler(routes) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to unstable_createStaticHandler\");\n  var dataRoutes = convertRoutesToDataRoutes(routes);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  function query(_x39) {\n    return _query.apply(this, arguments);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated thrown Response (such as a\n   * 404 or 405) will have a custom X-Remix-Router-Error: \"yes\" header on it\n   * in order to differentiate from responses thrown from user actions/loaders.\n   */\n\n\n  function _query() {\n    _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(request) {\n      var url, location, matches, _getMethodNotAllowedM, methodNotAllowedMatches, route, error, _getNotFoundMatches3, notFoundMatches, _route2, _error3, result;\n\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              url = new URL(request.url);\n              location = createLocation(\"\", createPath(url), null, \"default\");\n              matches = matchRoutes(dataRoutes, location);\n\n              if (validRequestMethods.has(request.method)) {\n                _context10.next = 8;\n                break;\n              }\n\n              _getMethodNotAllowedM = getMethodNotAllowedMatches(dataRoutes), methodNotAllowedMatches = _getMethodNotAllowedM.matches, route = _getMethodNotAllowedM.route, error = _getMethodNotAllowedM.error;\n              return _context10.abrupt(\"return\", {\n                location: location,\n                matches: methodNotAllowedMatches,\n                loaderData: {},\n                actionData: null,\n                errors: _defineProperty({}, route.id, error),\n                statusCode: error.status,\n                loaderHeaders: {},\n                actionHeaders: {}\n              });\n\n            case 8:\n              if (matches) {\n                _context10.next = 11;\n                break;\n              }\n\n              _getNotFoundMatches3 = getNotFoundMatches(dataRoutes), notFoundMatches = _getNotFoundMatches3.matches, _route2 = _getNotFoundMatches3.route, _error3 = _getNotFoundMatches3.error;\n              return _context10.abrupt(\"return\", {\n                location: location,\n                matches: notFoundMatches,\n                loaderData: {},\n                actionData: null,\n                errors: _defineProperty({}, _route2.id, _error3),\n                statusCode: _error3.status,\n                loaderHeaders: {},\n                actionHeaders: {}\n              });\n\n            case 11:\n              _context10.next = 13;\n              return queryImpl(request, location, matches);\n\n            case 13:\n              result = _context10.sent;\n\n              if (!(result instanceof Response)) {\n                _context10.next = 16;\n                break;\n              }\n\n              return _context10.abrupt(\"return\", result);\n\n            case 16:\n              return _context10.abrupt(\"return\", _extends({\n                location: location\n              }, result));\n\n            case 17:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n    return _query.apply(this, arguments);\n  }\n\n  function queryRoute(_x40, _x41) {\n    return _queryRoute.apply(this, arguments);\n  }\n\n  function _queryRoute() {\n    _queryRoute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(request, routeId) {\n      var url, location, matches, match, result, error, routeData;\n      return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              url = new URL(request.url);\n              location = createLocation(\"\", createPath(url), null, \"default\");\n              matches = matchRoutes(dataRoutes, location);\n\n              if (validRequestMethods.has(request.method)) {\n                _context11.next = 7;\n                break;\n              }\n\n              throw createRouterErrorResponse(null, {\n                status: 405,\n                statusText: \"Method Not Allowed\"\n              });\n\n            case 7:\n              if (matches) {\n                _context11.next = 9;\n                break;\n              }\n\n              throw createRouterErrorResponse(null, {\n                status: 404,\n                statusText: \"Not Found\"\n              });\n\n            case 9:\n              match = routeId ? matches.find(function (m) {\n                return m.route.id === routeId;\n              }) : getTargetMatch(matches, location);\n\n              if (match) {\n                _context11.next = 12;\n                break;\n              }\n\n              throw createRouterErrorResponse(null, {\n                status: 404,\n                statusText: \"Not Found\"\n              });\n\n            case 12:\n              _context11.next = 14;\n              return queryImpl(request, location, matches, match);\n\n            case 14:\n              result = _context11.sent;\n\n              if (!(result instanceof Response)) {\n                _context11.next = 17;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", result);\n\n            case 17:\n              error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n              if (!(error !== undefined)) {\n                _context11.next = 20;\n                break;\n              }\n\n              throw error;\n\n            case 20:\n              // Pick off the right state value to return\n              routeData = [result.actionData, result.loaderData].find(function (v) {\n                return v;\n              });\n              return _context11.abrupt(\"return\", Object.values(routeData || {})[0]);\n\n            case 22:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n    return _queryRoute.apply(this, arguments);\n  }\n\n  function queryImpl(_x42, _x43, _x44, _x45) {\n    return _queryImpl.apply(this, arguments);\n  }\n\n  function _queryImpl() {\n    _queryImpl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(request, location, matches, routeMatch) {\n      var _result, result;\n\n      return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n              _context12.prev = 1;\n\n              if (!validActionMethods.has(request.method)) {\n                _context12.next = 7;\n                break;\n              }\n\n              _context12.next = 5;\n              return submit(request, matches, routeMatch || getTargetMatch(matches, location), routeMatch != null);\n\n            case 5:\n              _result = _context12.sent;\n              return _context12.abrupt(\"return\", _result);\n\n            case 7:\n              _context12.next = 9;\n              return loadRouteData(request, matches, routeMatch);\n\n            case 9:\n              result = _context12.sent;\n              return _context12.abrupt(\"return\", result instanceof Response ? result : _extends({}, result, {\n                actionData: null,\n                actionHeaders: {}\n              }));\n\n            case 13:\n              _context12.prev = 13;\n              _context12.t0 = _context12[\"catch\"](1);\n\n              if (!isQueryRouteResponse(_context12.t0)) {\n                _context12.next = 19;\n                break;\n              }\n\n              if (!(_context12.t0.type === ResultType.error && !isRedirectResponse(_context12.t0.response))) {\n                _context12.next = 18;\n                break;\n              }\n\n              throw _context12.t0.response;\n\n            case 18:\n              return _context12.abrupt(\"return\", _context12.t0.response);\n\n            case 19:\n              if (!isRedirectResponse(_context12.t0)) {\n                _context12.next = 21;\n                break;\n              }\n\n              return _context12.abrupt(\"return\", _context12.t0);\n\n            case 21:\n              throw _context12.t0;\n\n            case 22:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, null, [[1, 13]]);\n    }));\n    return _queryImpl.apply(this, arguments);\n  }\n\n  function submit(_x46, _x47, _x48, _x49) {\n    return _submit.apply(this, arguments);\n  }\n\n  function _submit() {\n    _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(request, matches, actionMatch, isRouteRequest) {\n      var result, method, boundaryMatch, _boundaryMatch, _context13, context;\n\n      return _regeneratorRuntime().wrap(function _callee13$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              if (actionMatch.route.action) {\n                _context14.next = 6;\n                break;\n              }\n\n              if (!isRouteRequest) {\n                _context14.next = 3;\n                break;\n              }\n\n              throw createRouterErrorResponse(null, {\n                status: 405,\n                statusText: \"Method Not Allowed\"\n              });\n\n            case 3:\n              result = getMethodNotAllowedResult(request.url);\n              _context14.next = 12;\n              break;\n\n            case 6:\n              _context14.next = 8;\n              return callLoaderOrAction(\"action\", request, actionMatch, matches, undefined, // Basename not currently supported in static handlers\n              true, isRouteRequest);\n\n            case 8:\n              result = _context14.sent;\n\n              if (!request.signal.aborted) {\n                _context14.next = 12;\n                break;\n              }\n\n              method = isRouteRequest ? \"queryRoute\" : \"query\";\n              throw new Error(method + \"() call aborted\");\n\n            case 12:\n              if (!isRedirectResult(result)) {\n                _context14.next = 14;\n                break;\n              }\n\n              throw new Response(null, {\n                status: result.status,\n                headers: {\n                  Location: result.location\n                }\n              });\n\n            case 14:\n              if (!isDeferredResult(result)) {\n                _context14.next = 16;\n                break;\n              }\n\n              throw new Error(\"defer() is not supported in actions\");\n\n            case 16:\n              if (!isRouteRequest) {\n                _context14.next = 21;\n                break;\n              }\n\n              if (!isErrorResult(result)) {\n                _context14.next = 20;\n                break;\n              }\n\n              boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n              return _context14.abrupt(\"return\", {\n                matches: [actionMatch],\n                loaderData: {},\n                actionData: null,\n                errors: _defineProperty({}, boundaryMatch.route.id, result.error),\n                // Note: statusCode + headers are unused here since queryRoute will\n                // return the raw Response or value\n                statusCode: 500,\n                loaderHeaders: {},\n                actionHeaders: {}\n              });\n\n            case 20:\n              return _context14.abrupt(\"return\", {\n                matches: [actionMatch],\n                loaderData: {},\n                actionData: _defineProperty({}, actionMatch.route.id, result.data),\n                errors: null,\n                // Note: statusCode + headers are unused here since queryRoute will\n                // return the raw Response or value\n                statusCode: 200,\n                loaderHeaders: {},\n                actionHeaders: {}\n              });\n\n            case 21:\n              if (!isErrorResult(result)) {\n                _context14.next = 27;\n                break;\n              }\n\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              _boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n              _context14.next = 25;\n              return loadRouteData(request, matches, undefined, _defineProperty({}, _boundaryMatch.route.id, result.error));\n\n            case 25:\n              _context13 = _context14.sent;\n              return _context14.abrupt(\"return\", _extends({}, _context13, {\n                statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n                actionData: null,\n                actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n              }));\n\n            case 27:\n              _context14.next = 29;\n              return loadRouteData(request, matches);\n\n            case 29:\n              context = _context14.sent;\n              return _context14.abrupt(\"return\", _extends({}, context, result.statusCode ? {\n                statusCode: result.statusCode\n              } : {}, {\n                actionData: _defineProperty({}, actionMatch.route.id, result.data),\n                actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n              }));\n\n            case 31:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee13);\n    }));\n    return _submit.apply(this, arguments);\n  }\n\n  function loadRouteData(_x50, _x51, _x52, _x53) {\n    return _loadRouteData.apply(this, arguments);\n  }\n\n  function _loadRouteData() {\n    _loadRouteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(request, matches, routeMatch, pendingActionError) {\n      var isRouteRequest, requestMatches, matchesToLoad, results, method, context;\n      return _regeneratorRuntime().wrap(function _callee14$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              isRouteRequest = routeMatch != null;\n              requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n              matchesToLoad = requestMatches.filter(function (m) {\n                return m.route.loader;\n              }); // Short circuit if we have no loaders to run\n\n              if (!(matchesToLoad.length === 0)) {\n                _context15.next = 5;\n                break;\n              }\n\n              return _context15.abrupt(\"return\", {\n                matches: matches,\n                loaderData: {},\n                errors: pendingActionError || null,\n                statusCode: 200,\n                loaderHeaders: {}\n              });\n\n            case 5:\n              _context15.next = 7;\n              return Promise.all(_toConsumableArray(matchesToLoad.map(function (match) {\n                return callLoaderOrAction(\"loader\", request, match, matches, undefined, // Basename not currently supported in static handlers\n                true, isRouteRequest);\n              })));\n\n            case 7:\n              results = _context15.sent;\n\n              if (!request.signal.aborted) {\n                _context15.next = 11;\n                break;\n              }\n\n              method = isRouteRequest ? \"queryRoute\" : \"query\";\n              throw new Error(method + \"() call aborted\");\n\n            case 11:\n              // Can't do anything with these without the Remix side of things, so just\n              // cancel them for now\n              results.forEach(function (result) {\n                if (isDeferredResult(result)) {\n                  result.deferredData.cancel();\n                }\n              }); // Process and commit output from loaders\n\n              context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError);\n              return _context15.abrupt(\"return\", _extends({}, context, {\n                matches: matches\n              }));\n\n            case 14:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee14);\n    }));\n    return _loadRouteData.apply(this, arguments);\n  }\n\n  function createRouterErrorResponse(body, init) {\n    return new Response(body, _extends({}, init, {\n      headers: _extends({}, init.headers, {\n        \"X-Remix-Router-Error\": \"yes\"\n      })\n    }));\n  }\n\n  return {\n    dataRoutes: dataRoutes,\n    query: query,\n    queryRoute: queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  var newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: _defineProperty({}, context._deepestRenderedBoundaryId || routes[0].id, error)\n  });\n\n  return newContext;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  var path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !(\"formMethod\" in opts) && !(\"formData\" in opts)) {\n    return {\n      path: path\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path: path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: stripHashFromPath(path),\n        formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData\n      }\n    };\n  } // No formData to flatten for GET submission\n\n\n  if (!opts.formData) {\n    return {\n      path: path\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  var parsedPath = parsePath(path);\n\n  try {\n    var searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n\n    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n      searchParams.append(\"index\", \"\");\n    }\n\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path: path,\n      error: new ErrorResponse(400, \"Bad Request\", \"Cannot submit binary form data using GET\")\n    };\n  }\n\n  return {\n    path: createPath(parsedPath)\n  };\n}\n\nfunction getLoaderRedirect(state, redirect) {\n  var _state$navigation = state.navigation,\n      formMethod = _state$navigation.formMethod,\n      formAction = _state$navigation.formAction,\n      formEncType = _state$navigation.formEncType,\n      formData = _state$navigation.formData;\n  var navigation = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined\n  };\n  return navigation;\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  var boundaryMatches = matches;\n\n  if (boundaryId) {\n    var index = matches.findIndex(function (m) {\n      return m.route.id === boundaryId;\n    });\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  var actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : null; // Pick navigation matches that are net-new or qualify for revalidation\n\n  var boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  var boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  var navigationMatches = boundaryMatches.filter(function (match, index) {\n    return match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) || // If this route had a pending deferred cancelled it must be revalidated\n    cancelledDeferredRoutes.some(function (id) {\n      return id === match.route.id;\n    }) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  var revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach(function (_ref10, key) {\n    var _ref24 = _slicedToArray(_ref10, 3),\n        href = _ref24[0],\n        match = _ref24[1],\n        fetchMatches = _ref24[2]; // This fetcher was cancelled from a prior action submission - force reload\n\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match, fetchMatches]);\n    } else if (isRevalidationRequired) {\n      var shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  var isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  var isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  var currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  var currentUrl = createURL(currentLocation);\n  var currentParams = currentMatch.params;\n  var nextUrl = createURL(location);\n  var nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  var defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search || // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    var routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl: currentUrl,\n      currentParams: currentParams,\n      nextUrl: nextUrl,\n      nextParams: nextParams\n    }, submission, {\n      actionResult: actionResult,\n      defaultShouldRevalidate: defaultShouldRevalidate\n    }));\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nfunction callLoaderOrAction(_x54, _x55, _x56, _x57, _x58, _x59, _x60) {\n  return _callLoaderOrAction.apply(this, arguments);\n}\n\nfunction _callLoaderOrAction() {\n  _callLoaderOrAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(type, request, match, matches, basename, isStaticRequest, isRouteRequest) {\n    var resultType, result, reject, abortPromise, onReject, handler, status, location, activeMatches, routePathnames, requestPath, resolvedLocation, path, data, contentType;\n    return _regeneratorRuntime().wrap(function _callee15$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            if (isStaticRequest === void 0) {\n              isStaticRequest = false;\n            }\n\n            if (isRouteRequest === void 0) {\n              isRouteRequest = false;\n            }\n\n            abortPromise = new Promise(function (_, r) {\n              return reject = r;\n            });\n\n            onReject = function onReject() {\n              return reject();\n            };\n\n            request.signal.addEventListener(\"abort\", onReject);\n            _context16.prev = 5;\n            handler = match.route[type];\n            invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n            _context16.next = 10;\n            return Promise.race([handler({\n              request: request,\n              params: match.params\n            }), abortPromise]);\n\n          case 10:\n            result = _context16.sent;\n            _context16.next = 17;\n            break;\n\n          case 13:\n            _context16.prev = 13;\n            _context16.t0 = _context16[\"catch\"](5);\n            resultType = ResultType.error;\n            result = _context16.t0;\n\n          case 17:\n            _context16.prev = 17;\n            request.signal.removeEventListener(\"abort\", onReject);\n            return _context16.finish(17);\n\n          case 20:\n            if (!(result instanceof Response)) {\n              _context16.next = 51;\n              break;\n            }\n\n            status = result.status; // Process redirects\n\n            if (!(status >= 300 && status <= 399)) {\n              _context16.next = 36;\n              break;\n            }\n\n            location = result.headers.get(\"Location\");\n            invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in redirects\n\n            activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n            routePathnames = getPathContributingMatches(activeMatches).map(function (match) {\n              return match.pathnameBase;\n            });\n            requestPath = createURL(request.url).pathname;\n            resolvedLocation = resolveTo(location, routePathnames, requestPath);\n            invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + result.headers.get(\"Location\")); // Prepend the basename to the redirect location if we have one\n\n            if (basename) {\n              path = resolvedLocation.pathname;\n              resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n            }\n\n            location = createPath(resolvedLocation); // Don't process redirects in the router during static requests requests.\n            // Instead, throw the Response and let the server handle it with an HTTP\n            // redirect.  We also update the Location header in place in this flow so\n            // basename and relative routing is taken into account\n\n            if (!isStaticRequest) {\n              _context16.next = 35;\n              break;\n            }\n\n            result.headers.set(\"Location\", location);\n            throw result;\n\n          case 35:\n            return _context16.abrupt(\"return\", {\n              type: ResultType.redirect,\n              status: status,\n              location: location,\n              revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n            });\n\n          case 36:\n            if (!isRouteRequest) {\n              _context16.next = 38;\n              break;\n            }\n\n            throw {\n              type: resultType || ResultType.data,\n              response: result\n            };\n\n          case 38:\n            contentType = result.headers.get(\"Content-Type\");\n\n            if (!(contentType && contentType.startsWith(\"application/json\"))) {\n              _context16.next = 45;\n              break;\n            }\n\n            _context16.next = 42;\n            return result.json();\n\n          case 42:\n            data = _context16.sent;\n            _context16.next = 48;\n            break;\n\n          case 45:\n            _context16.next = 47;\n            return result.text();\n\n          case 47:\n            data = _context16.sent;\n\n          case 48:\n            if (!(resultType === ResultType.error)) {\n              _context16.next = 50;\n              break;\n            }\n\n            return _context16.abrupt(\"return\", {\n              type: resultType,\n              error: new ErrorResponse(status, result.statusText, data),\n              headers: result.headers\n            });\n\n          case 50:\n            return _context16.abrupt(\"return\", {\n              type: ResultType.data,\n              data: data,\n              statusCode: result.status,\n              headers: result.headers\n            });\n\n          case 51:\n            if (!(resultType === ResultType.error)) {\n              _context16.next = 53;\n              break;\n            }\n\n            return _context16.abrupt(\"return\", {\n              type: resultType,\n              error: result\n            });\n\n          case 53:\n            if (!(result instanceof DeferredData)) {\n              _context16.next = 55;\n              break;\n            }\n\n            return _context16.abrupt(\"return\", {\n              type: ResultType.deferred,\n              deferredData: result\n            });\n\n          case 55:\n            return _context16.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result\n            });\n\n          case 56:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, _callee15, null, [[5, 13, 17, 20]]);\n  }));\n  return _callLoaderOrAction.apply(this, arguments);\n}\n\nfunction createRequest(location, signal, submission) {\n  var url = createURL(stripHashFromPath(location)).toString();\n  var init = {\n    signal: signal\n  };\n\n  if (submission) {\n    var formMethod = submission.formMethod,\n        formEncType = submission.formEncType,\n        formData = submission.formData;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  var searchParams = new URLSearchParams();\n\n  var _iterator4 = _createForOfIteratorHelper(formData.entries()),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var _step4$value = _slicedToArray(_step4.value, 2),\n          key = _step4$value[0],\n          value = _step4$value[1];\n\n      invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n      searchParams.append(key, value);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  var loaderData = {};\n  var errors = null;\n  var statusCode;\n  var foundError = false;\n  var loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach(function (result, index) {\n    var id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      var boundaryMatch = findNearestBoundary(matches, id);\n      var error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = Object.assign(errors || {}, _defineProperty({}, boundaryMatch.route.id, error)); // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData: loaderData,\n    errors: errors,\n    statusCode: statusCode || 200,\n    loaderHeaders: loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  var _processRouteLoaderDa = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds),\n      loaderData = _processRouteLoaderDa.loaderData,\n      errors = _processRouteLoaderDa.errors; // Process results from our revalidating fetchers\n\n\n  for (var index = 0; index < revalidatingFetchers.length; index++) {\n    var _revalidatingFetchers = _slicedToArray(revalidatingFetchers[index], 3),\n        key = _revalidatingFetchers[0],\n        match = _revalidatingFetchers[2];\n\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    var result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      var boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, _defineProperty({}, boundaryMatch.route.id, result.error));\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      var doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData: loaderData,\n    errors: errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches) {\n  var mergedLoaderData = _extends({}, newLoaderData);\n\n  matches.forEach(function (match) {\n    var id = match.route.id;\n\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  var eligibleMatches = routeId ? matches.slice(0, matches.findIndex(function (m) {\n    return m.route.id === routeId;\n  }) + 1) : _toConsumableArray(matches);\n  return eligibleMatches.reverse().find(function (m) {\n    return m.route.hasErrorBoundary === true;\n  }) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes, status, statusText) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  var route = routes.find(function (r) {\n    return r.index || !r.path || r.path === \"/\";\n  }) || {\n    id: \"__shim-\" + status + \"-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route: route\n    }],\n    route: route,\n    error: new ErrorResponse(status, statusText, null)\n  };\n}\n\nfunction getNotFoundMatches(routes) {\n  return getShortCircuitMatches(routes, 404, \"Not Found\");\n}\n\nfunction getMethodNotAllowedMatches(routes) {\n  return getShortCircuitMatches(routes, 405, \"Method Not Allowed\");\n}\n\nfunction getMethodNotAllowedResult(path) {\n  var href = typeof path === \"string\" ? path : createPath(path);\n  console.warn(\"You're trying to submit to a route that does not have an action.  To \" + \"fix this, please add an `action` function to the route for \" + (\"[\" + href + \"]\"));\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(405, \"Method Not Allowed\", \"\")\n  };\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (var i = results.length - 1; i >= 0; i--) {\n    var result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  var parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isRedirectResponse(result) {\n  if (!(result instanceof Response)) {\n    return false;\n  }\n\n  var status = result.status;\n  var location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && obj.response instanceof Response && (obj.type === ResultType.data || ResultType.error);\n}\n\nfunction resolveDeferredResults(_x61, _x62, _x63, _x64, _x65, _x66) {\n  return _resolveDeferredResults.apply(this, arguments);\n}\n\nfunction _resolveDeferredResults() {\n  _resolveDeferredResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n    var _loop, index;\n\n    return _regeneratorRuntime().wrap(function _callee16$(_context18) {\n      while (1) {\n        switch (_context18.prev = _context18.next) {\n          case 0:\n            _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop(index) {\n              var result, match, currentMatch, isRevalidatingLoader;\n              return _regeneratorRuntime().wrap(function _loop$(_context17) {\n                while (1) {\n                  switch (_context17.prev = _context17.next) {\n                    case 0:\n                      result = results[index];\n                      match = matchesToLoad[index];\n                      currentMatch = currentMatches.find(function (m) {\n                        return m.route.id === match.route.id;\n                      });\n                      isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n                      if (!(isDeferredResult(result) && (isFetcher || isRevalidatingLoader))) {\n                        _context17.next = 7;\n                        break;\n                      }\n\n                      _context17.next = 7;\n                      return resolveDeferredData(result, signal, isFetcher).then(function (result) {\n                        if (result) {\n                          results[index] = result || results[index];\n                        }\n                      });\n\n                    case 7:\n                    case \"end\":\n                      return _context17.stop();\n                  }\n                }\n              }, _loop);\n            });\n            index = 0;\n\n          case 2:\n            if (!(index < results.length)) {\n              _context18.next = 7;\n              break;\n            }\n\n            return _context18.delegateYield(_loop(index), \"t0\", 4);\n\n          case 4:\n            index++;\n            _context18.next = 2;\n            break;\n\n          case 7:\n          case \"end\":\n            return _context18.stop();\n        }\n      }\n    }, _callee16);\n  }));\n  return _resolveDeferredResults.apply(this, arguments);\n}\n\nfunction resolveDeferredData(_x67, _x68, _x69) {\n  return _resolveDeferredData.apply(this, arguments);\n}\n\nfunction _resolveDeferredData() {\n  _resolveDeferredData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(result, signal, unwrap) {\n    var aborted;\n    return _regeneratorRuntime().wrap(function _callee17$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            if (unwrap === void 0) {\n              unwrap = false;\n            }\n\n            _context19.next = 3;\n            return result.deferredData.resolveData(signal);\n\n          case 3:\n            aborted = _context19.sent;\n\n            if (!aborted) {\n              _context19.next = 6;\n              break;\n            }\n\n            return _context19.abrupt(\"return\");\n\n          case 6:\n            if (!unwrap) {\n              _context19.next = 14;\n              break;\n            }\n\n            _context19.prev = 7;\n            return _context19.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.unwrappedData\n            });\n\n          case 11:\n            _context19.prev = 11;\n            _context19.t0 = _context19[\"catch\"](7);\n            return _context19.abrupt(\"return\", {\n              type: ResultType.error,\n              error: _context19.t0\n            });\n\n          case 14:\n            return _context19.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.data\n            });\n\n          case 15:\n          case \"end\":\n            return _context19.stop();\n        }\n      }\n    }, _callee17, null, [[7, 11]]);\n  }));\n  return _resolveDeferredData.apply(this, arguments);\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(function (v) {\n    return v === \"\";\n  });\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  var route = match.route,\n      pathname = match.pathname,\n      params = match.params;\n  return {\n    id: route.id,\n    pathname: pathname,\n    params: params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  var search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  var pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_FETCHER, IDLE_NAVIGATION, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, unstable_createStaticHandler, warning };","map":{"version":3,"mappings":"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","names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","history","createHref","createPath","encodeLocation","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserLocation","window","globalHistory","search","hash","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","parsePath","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","cond","message","console","warn","Error","e","createKey","random","toString","getHistoryState","current","_ref","path","parsedPath","searchIndex","createURL","origin","URL","getLocation","validateLocation","defaultView","handlePop","historyState","pushState","error","assign","replaceState","addEventListener","removeEventListener","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","treePath","id","join","invariant","children","has","add","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","forEach","meta","relativePath","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","_","prefix","__","str","star","pattern","compilePath","matcher","paramNames","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","endsWith","regexpSource","RegExp","value","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","includes","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","DeferredData","constructor","subscriber","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","pendingKeys","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","done","subscribe","cancel","abort","v","k","resolve","size","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","isRouteErrorResponse","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","isBrowser","createElement","isServer","createRouter","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getNotFoundMatches","initialized","m","loader","hydrationData","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","initialize","startNavigation","dispose","clear","deleteFetcher","updateState","newState","completeNavigation","isActionReload","newLoaderData","mergeLoaderData","getSavedScrollPosition","navigate","opts","normalizeNavigateOptions","submission","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createRequest","findNearestBoundary","handleAction","actionOutput","shortCircuited","pendingActionData","pendingActionError","_extends","handleLoaders","actionMatch","getTargetMatch","result","getMethodNotAllowedResult","callLoaderOrAction","isRedirectResult","redirectNavigation","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","getMatchesToLoad","matchesToLoad","revalidatingFetchers","routeId","fetcher","revalidatingFetcher","callLoadersAndMaybeResolveData","results","loaderResults","fetcherResults","findRedirect","getLoaderRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","redirectHistoryAction","currentMatches","fetchersToLoad","all","fetchMatches","resolveDeferredResults","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","validActionMethods","validRequestMethods","unstable_createStaticHandler","query","method","getMethodNotAllowedMatches","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","queryRoute","createRouterErrorResponse","find","values","routeData","routeMatch","submit","loadRouteData","isQueryRouteResponse","type","isRedirectResponse","response","isRouteRequest","Location","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","body","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isFetcher","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","navigationMatches","isNewLoader","shouldRevalidateLoader","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","isNewRouteInstance","currentPath","currentLocation","currentUrl","currentParams","nextUrl","nextParams","defaultShouldRevalidate","routeChoice","isStaticRequest","onReject","handler","resultType","activeMatches","requestPath","resolvedLocation","contentType","text","deferred","toUpperCase","Request","URLSearchParams","foundError","mergedLoaderData","eligibleMatches","reverse","hasErrorBoundary","getShortCircuitMatches","obj","isRevalidatingLoader","unwrap","resolveData","unwrappedData","getAll","handle","pathMatches"],"sources":["/Users/sahiljagtap/Desktop/Projects/Portfolio Website/sahil_web/node_modules/@remix-run/router/history.ts","/Users/sahiljagtap/Desktop/Projects/Portfolio Website/sahil_web/node_modules/@remix-run/router/utils.ts","/Users/sahiljagtap/Desktop/Projects/Portfolio Website/sahil_web/node_modules/@remix-run/router/router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLAC e navigations for data routers\n   * behave the same as POP\n   *\n   * @param location The incoming location from router.navigate()\n   */\n  encodeLocation(location: Location): Location;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    encodeLocation(location) {\n      return location;\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport function createURL(location: Location | string): URL {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  let base =\n    typeof window !== \"undefined\" &&\n    typeof window.location !== \"undefined\" &&\n    window.location.origin !== \"null\"\n      ? window.location.origin\n      : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createPath(location);\n  return new URL(href, base);\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    encodeLocation(location) {\n      // Encode a Location the same way window.location would\n      let url = createURL(createPath(location));\n      return {\n        ...location,\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type FormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: Exclude<FormMethod, \"get\">;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `${string}:${infer Param}`\n    ? Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  path: Path,\n  params: {\n    [key in PathParam<Path>]: string;\n  } = {} as any\n): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n      const star = \"*\" as PathParam<Path>;\n\n      if (params[star] == null) {\n        // If no splat was provided, trim the trailing slash _unless_ it's\n        // the entire path\n        return str === \"/*\" ? \"/\" : \"\";\n      }\n\n      // Apply the splat\n      return `${prefix}${params[star]}`;\n    });\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeys: Set<string | number> = new Set<string | number>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscriber?: (aborted: boolean) => void = undefined;\n  data: Record<string, unknown>;\n\n  constructor(data: Record<string, unknown>) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n  }\n\n  private trackPromise(\n    key: string | number,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string | number,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn: (aborted: boolean) => void) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport function defer(data: Record<string, unknown>) {\n  return new DeferredData(data);\n}\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n\n  constructor(status: number, statusText: string | undefined, data: any) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import type { History, Location, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  createURL,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(request: Request): Promise<StaticHandlerContext | Response>;\n  queryRoute(request: Request, routeId?: string): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Tuple of [key, href, DataRouteMatch, DataRouteMatch[]] for a revalidating\n * fetcher.load()\n */\ntype RevalidatingFetcher = [\n  string,\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Tuple of [href, DataRouteMatch, DataRouteMatch[]] for an active\n * fetcher.load()\n */\ntype FetchLoadMatch = [\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let { matches, route, error } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\" &&\n      state.navigation.formAction?.split(\"?\")[0] === location.pathname;\n\n    // Always preserve any existing loaderData from re-used routes\n    let newLoaderData = newState.loaderData\n      ? {\n          loaderData: mergeLoaderData(\n            state.loaderData,\n            newState.loaderData,\n            newState.matches || []\n          ),\n        }\n      : {};\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      ...newLoaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let location = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    location = init.history.encodeLocation(location);\n\n    let historyAction =\n      (opts && opts.replace) === true || submission != null\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createRequest(\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = getMethodNotAllowedResult(location);\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, result.location),\n        ...submission,\n      };\n      await startRedirectNavigation(\n        result,\n        redirectNavigation,\n        opts && opts.replace\n      );\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation, replace);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let { error } = getMethodNotAllowedResult(path);\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location),\n        ...submission,\n      };\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[]\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    redirect: RedirectResult,\n    navigation: Navigation,\n    replace?: boolean\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    invariant(\n      navigation.location,\n      \"Expected a location on the redirect navigation\"\n    );\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    await startNavigation(redirectHistoryAction, navigation.location, {\n      overrideNavigation: navigation,\n    });\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map(([, href, match, fetchMatches]) =>\n        callLoaderOrAction(\n          \"loader\",\n          createRequest(href, request.signal),\n          match,\n          fetchMatches,\n          router.basename\n        )\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map(([, , match]) => match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nconst validActionMethods = new Set([\"POST\", \"PUT\", \"PATCH\", \"DELETE\"]);\nconst validRequestMethods = new Set([\"GET\", \"HEAD\", ...validActionMethods]);\n\nexport function unstable_createStaticHandler(\n  routes: AgnosticRouteObject[]\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to unstable_createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (!validRequestMethods.has(request.method)) {\n      let {\n        matches: methodNotAllowedMatches,\n        route,\n        error,\n      } = getMethodNotAllowedMatches(dataRoutes);\n      return {\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    } else if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      return {\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    let result = await queryImpl(request, location, matches);\n    if (result instanceof Response) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated thrown Response (such as a\n   * 404 or 405) will have a custom X-Remix-Router-Error: \"yes\" header on it\n   * in order to differentiate from responses thrown from user actions/loaders.\n   */\n  async function queryRoute(request: Request, routeId?: string): Promise<any> {\n    let url = new URL(request.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (!validRequestMethods.has(request.method)) {\n      throw createRouterErrorResponse(null, {\n        status: 405,\n        statusText: \"Method Not Allowed\",\n      });\n    } else if (!matches) {\n      throw createRouterErrorResponse(null, {\n        status: 404,\n        statusText: \"Not Found\",\n      });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (!match) {\n      throw createRouterErrorResponse(null, {\n        status: 404,\n        statusText: \"Not Found\",\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, match);\n    if (result instanceof Response) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    let routeData = [result.actionData, result.loaderData].find((v) => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (validActionMethods.has(request.method)) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, routeMatch);\n      return result instanceof Response\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\"> | Response> {\n    let result: DataResult;\n    if (!actionMatch.route.action) {\n      if (isRouteRequest) {\n        throw createRouterErrorResponse(null, {\n          status: 405,\n          statusText: \"Method Not Allowed\",\n        });\n      }\n      result = getMethodNotAllowedResult(request.url);\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        undefined, // Basename not currently supported in static handlers\n        true,\n        isRouteRequest\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n        return {\n          matches: [actionMatch],\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [boundaryMatch.route.id]: result.error,\n          },\n          // Note: statusCode + headers are unused here since queryRoute will\n          // return the raw Response or value\n          statusCode: 500,\n          loaderHeaders: {},\n          actionHeaders: {},\n        };\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, undefined, {\n        [boundaryMatch.route.id]: result.error,\n      });\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(request, matches);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<StaticHandlerContext, \"location\" | \"actionData\" | \"actionHeaders\">\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          undefined, // Basename not currently supported in static handlers\n          true,\n          isRouteRequest\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n    results.forEach((result) => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    });\n\n    // Process and commit output from loaders\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError\n    );\n\n    return {\n      ...context,\n      matches,\n    };\n  }\n\n  function createRouterErrorResponse(\n    body: BodyInit | null | undefined,\n    init: ResponseInit\n  ) {\n    return new Response(body, {\n      ...init,\n      headers: {\n        ...init.headers,\n        \"X-Remix-Router-Error\": \"yes\",\n      },\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || (!(\"formMethod\" in opts) && !(\"formData\" in opts))) {\n    return { path };\n  }\n\n  // Create a Submission on non-GET navigations\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: stripHashFromPath(path),\n        formEncType:\n          (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      },\n    };\n  }\n\n  // No formData to flatten for GET submission\n  if (!opts.formData) {\n    return { path };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n    if (\n      isFetcher &&\n      parsedPath.search &&\n      hasNakedIndexQuery(parsedPath.search)\n    ) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = `?${searchParams}`;\n  } catch (e) {\n    return {\n      path,\n      error: new ErrorResponse(\n        400,\n        \"Bad Request\",\n        \"Cannot submit binary form data using GET\"\n      ),\n    };\n  }\n\n  return { path: createPath(parsedPath) };\n}\n\nfunction getLoaderRedirect(\n  state: RouterState,\n  redirect: RedirectResult\n): Navigation {\n  let { formMethod, formAction, formEncType, formData } = state.navigation;\n  let navigation: NavigationStates[\"Loading\"] = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined,\n  };\n  return navigation;\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter(\n    (match, index) =>\n      match.route.loader != null &&\n      (isNewLoader(state.loaderData, state.matches[index], match) ||\n        // If this route had a pending deferred cancelled it must be revalidated\n        cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n        shouldRevalidateLoader(\n          state.location,\n          state.matches[index],\n          submission,\n          location,\n          match,\n          isRevalidationRequired,\n          actionResult\n        ))\n  );\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach(([href, match, fetchMatches], key) => {\n      // This fetcher was cancelled from a prior action submission - force reload\n      if (cancelledFetcherLoads.includes(key)) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      } else if (isRevalidationRequired) {\n        let shouldRevalidate = shouldRevalidateLoader(\n          href,\n          match,\n          submission,\n          href,\n          match,\n          isRevalidationRequired,\n          actionResult\n        );\n        if (shouldRevalidate) {\n          revalidatingFetchers.push([key, href, match, fetchMatches]);\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: AgnosticDataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: AgnosticDataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    isNewRouteInstance(currentMatch, match) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename: string | undefined,\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params }),\n      abortPromise,\n    ]);\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (result instanceof Response) {\n    let status = result.status;\n\n    // Process redirects\n    if (status >= 300 && status <= 399) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in redirects\n      let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n      let routePathnames = getPathContributingMatches(activeMatches).map(\n        (match) => match.pathnameBase\n      );\n      let requestPath = createURL(request.url).pathname;\n      let resolvedLocation = resolveTo(location, routePathnames, requestPath);\n      invariant(\n        createPath(resolvedLocation),\n        `Unable to resolve redirect location: ${result.headers.get(\"Location\")}`\n      );\n\n      // Prepend the basename to the redirect location if we have one\n      if (basename) {\n        let path = resolvedLocation.pathname;\n        resolvedLocation.pathname =\n          path === \"/\" ? basename : joinPaths([basename, path]);\n      }\n\n      location = createPath(resolvedLocation);\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\nfunction createRequest(\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(\n      typeof value === \"string\",\n      'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n        'please use \"multipart/form-data\" instead.'\n    );\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds?: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n      // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data;\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[]\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  matches.forEach((match) => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(\n  routes: AgnosticDataRouteObject[],\n  status: number,\n  statusText: string\n): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n  error: ErrorResponse;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-${status}-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n    error: new ErrorResponse(status, statusText, null),\n  };\n}\n\nfunction getNotFoundMatches(routes: AgnosticDataRouteObject[]) {\n  return getShortCircuitMatches(routes, 404, \"Not Found\");\n}\n\nfunction getMethodNotAllowedMatches(routes: AgnosticDataRouteObject[]) {\n  return getShortCircuitMatches(routes, 405, \"Method Not Allowed\");\n}\n\nfunction getMethodNotAllowedResult(path: Location | string): ErrorResult {\n  let href = typeof path === \"string\" ? path : createPath(path);\n  console.warn(\n    \"You're trying to submit to a route that does not have an action.  To \" +\n      \"fix this, please add an `action` function to the route for \" +\n      `[${href}]`\n  );\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(405, \"Method Not Allowed\", \"\"),\n  };\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!(result instanceof Response)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    obj.response instanceof Response &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}